import ipywidgets as widgets

from IPython.display import display


def run_forecast_ui():
html_text = widgets.HTML(
value="<h2 style='color:#66ccff'> Welcome to use the interactive system </h2><p> A simple prediction system. </p>"
)

city = widgets.Text(
value = "perth",
placeholder=' Please enter the city '
description=' City Name: '
disabled=False
)

max_day = widgets.Dropdown(
options=[1, 2, 3, 4, 5],
value=5,
description=' Expected number of predicted days (1-5 days) : '
layout=widgets.Layout(width='300px'),
style={'description_width': '150px'}
)

question_input = widgets.Text(
value = "rain",
placeholder=' Please enter the question '
description=' What weather questions would you like to ask: '
disabled=False,
layout=widgets.Layout(width='300px'),
style={'description_width': '150px'}
)

predict_button = widgets.Button(
description=' Prediction '
button_style='',
tooltip=' Click on me '
icon='check'
)

exit_button = widgets.Button(
description=' Exit '
button_style='danger',
tooltip=' End the program '
icon='sign-out-alt'
)

output = widgets.Output()


# Click the button to respond
def on_predict_click(b):
output.clear_output()

city_name = city.value.strip()
question = question_input.value.strip()
day = int(max_day.value)

city.value = ''
question_input.value = ''
max_day.value = 5

_, _, _, index = validate_inputs(city_name, day, question)

with output:
if index == 0:
print("‚ùå is incorrect. Please re-enter: ")
print(f" City: {city_name}")
print(f" days: {day}")
print(f" question: {question}")
else:
print("‚úÖ Enter and the chart will be generated below ")

try:
line_chart(question, city_name, day)
except Exception as e:
print("üö´ line_chart failed to execute: ", e)



def on_exit_click(b):
output.clear_output()
ui_box.close()
with output:
print(" Exited the system. Thank you for using it!" )

predict_button.on_click(on_predict_click)
exit_button.on_click(on_exit_click)

# Wrap all controls to facilitate unified close() when exiting
ui_box = widgets.VBox([html_text, city, max_day, question_input,
widgets.HBox([predict_button, exit_button]),
output])
display(ui_box)

This is my user interaction interface code. When I execute the main function:
def main():
line_chart("rain", "perth", 5)
run_forecast_ui()


# better way to run the main code
if __name__ == "__main__":
main()
It can be executed normally: First, create a chart, then generate a new chart at the bottom of the ui after entering the data, and update the chart below by changing the entered data.
But the problem is that when I commented out the function line_chart in the main function (which will be used for the ui to generate the chart) (that is to say, this function is not used before calling the ui to generate the chart by passing values), the UI executes normally and responds to the input values, but the chart cannot be displayed.
ChatGPT said:

The problem you described - the inability to generate a chart below the UI when running an unpre-generated chart for the first time - is very likely caused by the fact that the Plotly chart renderer in the Jupyter Notebook environment is not initialized or the display environment of the UI is not bound to the chart rendering environment.
‚úÖ Question summary:

When you call line_chart() first in main(), Plotly initializes the rendering environment (such as notebook, notebook_connected, etc.), so that even if you draw again in ipywidgets.output () later, it can be displayed normally.

However, if you directly enter the UI without calling line_chart() first, the initialization of Plotly will not be triggered and the chart will not be rendered (although the logic and data are correct).

‚úÖ Solution:

Add this line of code at the beginning of the file or in run_forecast_ui() :

import plotly.io as pio
pio.renderers.default = 'notebook_connected' # or 'notebook'

This ensures that Plotly charts are automatically bound to the Notebook renderer in the Jupyter environment, eliminating the need to draw charts in advance to trigger initialization.
‚úÖ Additional suggestion: Confirm whether fig.show() is used in line_chart()?

Make sure you call it in line_chart() in the following way:

def line_chart(question, city, day):
...
fig.show()

Otherwise, even if the chart is created, it will not be displayed.
‚úÖ Sample fix consolidation:

import plotly.io as pio
pio.renderers.default = 'notebook_connected' # Ensure the initialization of the Plotly renderer

Just place it at the top of your file or at the beginning of run_forecast_ui().
‚úÖ Suggested test process:

Comment out line_chart(...) in main()

Add pio.renderers.default = 'notebook_connected'

Run the UI interface, try to enter the new city and the problem, and click "Prediction".

The chart should be generated normally in the Output() area

If you still encounter problems, I can also help you check whether the implementation of the line_chart() function is correctly bound to the output area. You can post its complete definition for me to analyze.
You said:
from datetime import datetime
import plotly.graph_objects as go
from IPython.display import display

def line_chart(questions, city, max_day):
# print(" Entered the function ")
data, index, answer = get_line_chart_data(questions, city, max_day) # Get the data
if index == 0: # No data is returned, only output
print("\n".join(data))
else:
print("1")
title_of_image = "null"
description= "null"
if answer == "pop":
title_of_image = "Rainfall prediction chart"
description = "Rain"
elif answer == "describe":
title_of_image = "Weather description map"
description = "Weather"
elif answer == "cloth" or "temperature":
title_of_image = "Temperature prediction chart"
description = "Temperature"
elif answer == "wind":
title_of_image = "Wind speed prediction graph"
description = "Wind Speed"
elif answer == "humidity":
title_of_image = "Humidity prediction chart"
description = "Humidity"
print(f" The question you asked is related to {description} and a line graph is being generated ")
times = [datetime.strptime(item[0], "%Y-%m-%d %H:%M:%S") for item in data]
values = [item[1] for item in data]

# Create interactive charts using Plotly
fig = go.Figure()

# Add data to the chart
fig.add_trace(go.Scatter(x=times, y=values, mode='lines+markers', name='Precipitation Probability'))

# Update Layout
fig.update_layout(
title=title_of_image,
xaxis_title="Date and Time",
yaxis_title={
"pop": "Precipitation Probability",
"describe": "Weather Condition Code",
"cloth": "Temperature (¬∞C)",
"temperature": "Temperature (¬∞C)",
"wind": "Wind Speed (km/h)",
"humidity": "Humidity (%)"
}.get(answer, "Value"),
xaxis=dict(tickformat="%Y-%m-%d %H:%M:%S", tickangle=45),
autosize=True
)

# Display the chart
display(fig)
This is the line chart code
ChatGPT said:

Thank you for providing the complete code. The structure of your line_chart() function is basically correct, but the problems do lie in the following points:
‚úÖ„Äê Core Issue Location „Äë Two key reasons why the chart is not shown:
‚ë† Plotly charts do not call.show() or are not bound to the notebook renderer

Although you used display(fig), which works in some Jupyter Notebook environments, it is not reliable under the ipywidgets.output () container. Recommended for use

fig.show()

Replace display(fig) so that Plotly can ensure correct rendering both in the UI output area and in the Notebook.
‚ë° Determine the logical error of the statement

You wrote:

elif answer == "cloth" or "temperature":

This is actually equivalent to:

elif (answer == "cloth") or True:

Because "temperature" is a non-empty string and its Boolean value is always True, this branch is always valid.

It should be changed to:

elif answer in ["cloth", "temperature"]:

[Suggested fix] The modified line_chart() function is as follows: ‚úÖ

from datetime import datetime
import plotly.graph_objects as go

def line_chart(questions, city, max_day):
data, index, answer = get_line_chart_data(questions, city, max_day)
if index == 0:
print("\n".join(data))
else:
title_of_image = "null"
description = "null"
if answer == "pop":
title_of_image = "Rainfall prediction chart"
description = "Rain"
elif answer == "describe":
title_of_image = "Weather description map"
description = "Weather"
elif answer in ["cloth", "temperature"]:
title_of_image = "Temperature prediction chart"
description = "Temperature"
elif answer == "wind":
title_of_image = "Wind speed prediction graph"
description = "Wind Speed"
elif answer == "humidity":
title_of_image = "Humidity prediction chart"
description = "Humidity"

print(f" The question you asked is related to {description} and a line graph is being generated ")

times = [datetime.strptime(item[0], "%Y-%m-%d %H:%M:%S") for item in data]
values = [item[1] for item in data]

fig = go.Figure()
fig.add_trace(go.Scatter(x=times, y=values, mode='lines+markers', name='Value'))

fig.update_layout(
title=title_of_image,
xaxis_title="Date and Time",
yaxis_title={
"pop": "Precipitation Probability",
"describe": "Weather Condition Code",
"cloth": "Temperature (¬∞C)",
"temperature": "Temperature (¬∞C)",
"wind": "Wind Speed (km/h)",
"humidity": "Humidity (%)"
}.get(answer, "Value"),
xaxis=dict(tickformat="%Y-%m-%d %H:%M:%S", tickangle=45),
autosize=True
)

fig.show() # Core repair point

‚úÖ [Global Suggestion] Add to the top layer:

import plotly.io as pio
pio.renderers.default = 'notebook_connected'

It can prevent the problem of charts not being displayed when Jupyter + ipywidgets are used together.
‚úÖ [Test Recommendation] Final execution order:

# There is no need to execute line_chart first
run_forecast_ui()

Then directly enter the content from the UI ‚Üí Click "Prediction" ‚Üí The chart should display normally.

If you still can't display the chart, please tell me which environment you are using (such as Jupyter Notebook/JupyterLab/Google Colab/IntelliJ with IPython plugin), and I will provide exclusive repair suggestions for the corresponding platform.
You said:
After the update, even if I didn't comment out the line function, the chart still won't be displayed. However, the position where the chart was originally displayed is still occupied, but it's not shown
ChatGPT said:

Your description - "The chart position is still occupied, but the chart is not displayed" - indicates that the chart object was actually "created", but was not successfully rendered to the output area of the Notebook. Combined with what you mentioned before:

IntelliJ IDEA is used

The chart is displayed normally for the first time, but in some cases it no longer shows up

This is very likely caused by the following reasons:
‚úÖ Root Cause checklist (with solutions)
üîπ 1. The Plotly renderer is not compatible with IDEA 's Jupyter plugin

The Jupyter Notebook plugin in IntelliJ IDEA does not fully support Plotly's notebook_connected or notebook rendering methods.
‚úÖ Solution:

Add the following code at the beginning of the file to force the use of the iframe renderer (the most stable and universal rendering method) :

import plotly.io as pio
pio.renderers.default = 'iframe_connected'

Or:

pio.renderers.default = 'iframe' # If you don't want it to load resources online

This will enable fig.show() to be displayed correctly in any IDE or HTML rendering.
üîπ 2. Your UI Output area is ipywidgets.Output(), which may have poor compatibility with Plotly 's notebook renderer

ipywidgets.Output() and fig.show() do not always work perfectly together, especially in non-Jupyter Lab/standard Notebook environments.
‚úÖ Alternative: use display(fig.to_html(...)) Render HTML

Modify the display part of line_chart() as follows:

from IPython.display import HTML

...

html = fig.to_html(include_plotlyjs='cdn', full_html=False)
display(HTML(html))

This will manually convert the chart to HTML and render it - even the Output area can work well.
üîπ 3. The chart data failed to generate but no error was reported

You said, "The position is occupied but the graph is not displayed," or the data might be empty but no exception was triggered.
‚úÖ Check if data is empty:

Add: In line_chart()

if not data:
print("‚ö†Ô∏è No data was obtained, the graph cannot be generated ")
return

‚úÖ Recommended final writing (robust)

Change the display part of line_chart() to the following code to adapt to all environments:

from IPython.display import HTML

...

if not data:
print("‚ö†Ô∏è No data was obtained, the graph cannot be generated ")
return

...

# Use a more stable HTML rendering method
html = fig.to_html(include_plotlyjs='cdn', full_html=False)
display(HTML(html))

Meanwhile, add: At the top

import plotly.io as pio
pio.renderers.default = 'iframe_connected'

üîç adds: Try to see if the chart works in a standard jupyter notebook (the web page where jupyter notebook starts). If it can be explained that it is a compatibility issue with IntelliJ.

If you like, I can also help you extract the display part in line_chart() into an independent method, for example:

def render_chart(fig):
from IPython.display import HTML
html = fig.to_html(include_plotlyjs='cdn', full_html=False)
display(HTML(html))

Then you can call render_chart(fig) in line_chart().

Do you need me to help you organize it into a complete and runnable fix version of the code?
You said:
The problem persists after the update. It can be displayed without commenting, but it doesn't show up after commenting
ChatGPT said:

Thank you very much for your patient feedback. The phenomenon you described is very crucial:

‚úÖ Unannotated line_chart() displays the chart in the main function
‚ùå After annotation the chart is not shown at all, but the position is still occupied

This indicates that whether the chart can be displayed is not a matter of data or logic, but rather the incorrect initialization of the Plotly rendering environment during the first run, especially when performing dynamic plotting in the Output() container of ipywidgets.
‚úÖ Complete fix: Manually activate the renderer + force embed HTML diagrams

Let's combine a thorough repair solution to adapt to any UI interaction environment (including IntelliJ) :
‚úÖ Step 1: Force Plotly to use HTML rendering

Replace the fig.show() part at the end of line_chart() :

from IPython.display import HTML

def render_chart(fig):
html = fig.to_html(include_plotlyjs='cdn', full_html=False)
display(HTML(html))

Then in line_chart(), use:

render_chart(fig)

‚úÖ Step 2: Force boot the renderer to activate once during UI initialization (key)

You must call the empty graph initialization once before the UI initialization to allow the Plotly renderer to complete the registration.
‚úî Add this function (initialize the empty graph only once) :

def initialize_plotly_renderer():
import plotly.graph_objects as go
from IPython.display import HTML
fig = go.Figure()
fig.add_trace(go.Scatter(x=[0], y=[0]))
html = fig.to_html(include_plotlyjs='cdn', full_html=False)
display(HTML(html))

Then write it like this in the main function:

def main():
initialize_plotly_renderer() # üü© force preload the chart renderer
run_forecast_ui()

‚úÖ Step 3: Ensure that renderer Settings are added to the top (optional but recommended)

import plotly.io as pio
pio.renderers.default = 'iframe_connected'

üîÅ Key processes after the fix

1. main():
-initialize_plotly_renderer () ‚úÖ„Äê Fix the first renderer not initialized „Äë
- run_forecast_ui()

2. The user clicks on "Prediction" :
Draw dynamically in the output area
Render charts with HTML and adapt to all environments

3. There is no need to pre-call line_chart(). The chart is always displayed

‚úÖ If you want me to wrap it into a complete code structure, you can also send out your get_line_chart_data() and I will connect all the interfaces for you.

If it still fails, please tell me the complete environment you are currently running in, including:

IntelliJ IDEA + Jupyter plugin? Or Jupyter Notebook?

Is Anaconda or a virtual environment used?

Is the.ipynb file or the.py file used for execution?

I will optimize directly for your platform.